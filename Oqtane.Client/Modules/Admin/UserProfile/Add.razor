@namespace Oqtane.Modules.Admin.UserProfile
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IUserRoleService UserRoleService
@inject INotificationService NotificationService
@inject IStringLocalizer<Add> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (PageState.User != null)
{
<div class="container">
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="to" HelpText="Enter the user you wish to send a message to" ResourceKey="To">To: </Label>
        <div class="col-sm-9">
            <AutoComplete OnSearch="GetUsers" Placeholder="@Localizer["Username.Enter"]" @ref="username" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="subject" HelpText="Enter the subject of the message" ResourceKey="Subject">Subject: </Label>
        <div class="col-sm-9">
            <input id="subject" class="form-control" @bind="@subject" />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="message" HelpText="Enter the message" ResourceKey="Message">Message: </Label>
        <div class="col-sm-9">
            <textarea id="message" class="form-control" @bind="@body" rows="5" />
        </div>
    </div>
</div>
<br/>
    <button type="button" class="btn btn-primary" @onclick="Send">@SharedLocalizer["Send"]</button>
    <NavLink class="btn btn-secondary" href="@PageState.ReturnUrl">@SharedLocalizer["Cancel"]</NavLink>
}

@code {
    private AutoComplete username;
    private string subject = "";
    private string body = "";

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.View;

    public override string Title => "Send Notification";

    private async Task<Dictionary<string, string>> GetUsers(string filter)
    {
        var users = await UserRoleService.GetUserRolesAsync(PageState.Site.SiteId, RoleNames.Registered);
        return users.Where(item => item.User.Username.Contains(filter, StringComparison.OrdinalIgnoreCase))
            .ToDictionary(item => item.UserId.ToString(), item => item.User.Username);
    }

    private async Task Send()
    {
        try
        {
            if (!string.IsNullOrEmpty(username.Key) && !string.IsNullOrEmpty(subject))
            {
                var user = await UserService.GetUserAsync(SharedConverter.ParseInteger(username.Key), ModuleState.SiteId);
                if (user != null)
                {
                    var notification = new Notification(PageState.Site.SiteId, PageState.User, user, subject, body);
                    notification = await NotificationService.AddNotificationAsync(notification);
                    await logger.LogInformation("Notification Created {NotificationId}", notification.NotificationId);
                    NavigationManager.NavigateTo(PageState.ReturnUrl);
                }
                else
                {
                    AddModuleMessage(Localizer["Message.User.Invalid"], MessageType.Warning);
                }
            }
            else
            {
                AddModuleMessage(Localizer["Message.Required"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Adding Notification {Error}", ex.Message);
            AddModuleMessage(Localizer["Error.Notification.Add"], MessageType.Error);
        }
    }

}
